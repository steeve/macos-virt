load("@bazel_skylib//rules:common_settings.bzl", "string_flag")

string_flag(
    name = "cpu",
    build_setting_default = "intel",
    visibility = ["//visibility:public"],
)

filegroup(
    name = "config.intel",
    srcs = ["config.intel.plist"],
)

filegroup(
    name = "config.amd",
    srcs = ["config.amd.plist"],
)

config_setting(
    name = "config_intel",
    flag_values = {":cpu": "intel"},
)

config_setting(
    name = "config_amd",
    flag_values = {":cpu": "amd"},
)

alias(
    name = "config",
    actual = select({
        ":config_intel": ":config.intel",
        ":config_amd": ":config.amd",
    }),
)

filegroup(
    name = "ACPI",
    srcs = glob(["ACPI/**"]),
)

genrule(
    name = "rootfs",
    srcs = [
        "config",
        "startup.nsh",
        ":ACPI",
        "@com_github_acidanthera_lilu//:all",
        "@com_github_acidanthera_opencore//:all",
        "@com_github_acidanthera_virtualsmc//:all",
    ],
    outs = ["rootfs.zip"],
    cmd = """\
sandbox=$${PWD}
work=$$(mktemp -d $(RULEDIR)/.work.XXXXXX)
function clean() {
    rm -rf $${work}
}
trap clean EXIT

# EFI
cp -rf external/com_github_acidanthera_opencore/EFI $${work}/
cp $(execpath :startup.nsh) $${work}/

# Bootloader
cp -rf external/com_github_acidanthera_opencore/Utilities/LegacyBoot/boot $${work}/

mkdir -p $${work}/EFI/OC/Kexts
cp -rf external/com_github_acidanthera_lilu/Lilu.kext $${work}/EFI/OC/Kexts/
cp -rf external/com_github_acidanthera_virtualsmc/Kexts/VirtualSMC.kext $${work}/EFI/OC/Kexts/
cp -rf external/com_github_acidanthera_virtualsmc/Kexts/SMCProcessor.kext $${work}/EFI/OC/Kexts/
cp -rf external/com_github_acidanthera_virtualsmc/Kexts/SMCSuperIO.kext $${work}/EFI/OC/Kexts/
cp -rf $(location :config) $${work}/EFI/OC/config.plist

mkdir -p $${work}/EFI/OC/ACPI
cp -f $(locations :ACPI) $${work}/EFI/OC/ACPI/

mv -f $${work}/EFI/BOOT/BOOTx64.efi $${work}/EFI/BOOT/BOOTX64.efi

(
    cd $${work}
    find .
    zip -qq -0 -r $${sandbox}/$(@) *
)
""",
    visibility = ["//visibility:public"],
)

genrule(
    name = "image.noboot",
    srcs = [":rootfs"],
    outs = ["opencore.noboot.img"],
    cmd = """\
work=$$(mktemp -d $(RULEDIR)/.work.XXXXXX)
function clean() {
    rm -rf $${work}
}
trap clean EXIT
unzip -qq $(execpath :rootfs) -d $${work}
hdiutil create \
    -format UDRW \
    -fs FAT32 \
    -layout MBRSPUD \
    -volname OpenCore \
    -srcFolder $${work} \
    opencore
mv opencore.dmg $(@)
""",
    tags = ["no-sandbox"],
    visibility = ["//visibility:public"],
)

genrule(
    name = "image",
    srcs = [
        ":image.noboot",
        "@com_github_acidanthera_opencore//:all",
    ],
    outs = [
        "opencore.img",
    ],
    cmd = """\
ocboot=external/com_github_acidanthera_opencore/Utilities/LegacyBoot
image=$(location :opencore.img)
cp -f $(location :image.noboot) $${image}
chmod +w $${image}

# Write boot0, only 440 bytes
dd if=$${ocboot}/boot0 \
    of=$${image} \
    bs=440 \
    count=1 \
    conv=notrunc 2> /dev/null

# Update FAT32 parition boot record with boot code
cp $${ocboot}/boot1f32 boot1f32.bin
dd if=$${image} of=pbr.bin skip=1 count=1 bs=512 2> /dev/null
dd if=pbr.bin of=boot1f32.bin skip=3 seek=3 bs=1 count=87 conv=notrunc 2> /dev/null
dd if=boot1f32.bin of=$${image} seek=1 count=1 bs=512 conv=notrunc 2> /dev/null

# For good measure, mark the partition active
fdisk -e $${image} <<-EOF 2>&1 > /dev/null
flag 1
write
quit
EOF
""",
    visibility = ["//visibility:public"],
)
